from pwn import *
import time
import re
import multiprocessing
from pyfirmata import Arduino, util, STRING_DATA

def msg( text):
    if text:
        board.send_sysex( STRING_DATA, util.str_to_two_byte_iter( text ) )


def handle_error_connect(port):
    p=connect_proxmark(port)
    while p==False:
        print("Nouvelle Tentative de connexion")
        time.sleep(5)
        p=connect_proxmark(port)
    return p

def connect_proxmark(port):

    p=process(['/home/quentin/proxmark3/pm3','-p',port])
    recu=b""
    while b'Communicating' not in recu:
        recu=p.recvline(timeout=5)
        print(recu)
        if b'!!' in recu or b'?' in recu:
            p.kill()
            return False
    print("Connecté")
    return p



def display_command(command,proc,timeout):
    f=open('rrr.txt','a')
    #print("bonjour")
    proc.sendline(command)
    recu=""
    while recu!=b'':
        recu=proc.recvline(timeout=timeout)
        if b'+'  in recu or b'=' in recu :
            print(recu)
            f.write(recu.decode('utf-8'))
            if b'saved' in recu:
                s=recu.decode('utf-8')
                pattern = r'(/[^\n]+\.bin)'
                pattern2 = r'(/[^\n]+\.json)'
                match=re.search(pattern,s)
                if match:
                    f.write(f"Dump format bin de la carte {match.group(1)}")
                match2=re.search
                match2=re.search(pattern2,s)
                if match2:
                    f.write(f"Dump format json de la carte {match2.group(1)}")
        elif b'?' in recu:
            f.write(recu.decode('utf-8'))
            print(recu)
            s=recu.decode('utf-8')
            match=re.search(r'`([^`]+)`',s)
            print(match)
            if match and match.group(1)!='hf mf':
                commande=match.group(1)
                f.write(f'\n Running {commande}')
                f.close()
                display_command(commande.encode('utf-8'),proc,timeout=5)
                f=open('rrr.txt','a')
        elif b'!' in recu:
            print(recu)
            if b'[!!] Error: No response from Proxmark3' in recu:
                print("Erreur de communication avec le proxmark")
                print(recu)
                
                return False

    f.write("\n"+"-"*150+"\n")
    f.close()
    return True



def search_hf14a_cards(proc):
    while True:
        display_command(b'hf 14a info',proc,1)

def crack_cards(proc):
    while True:
        try:
            status=display_command(b'hf mf autopwn',proc,15)
            if status==False:
                port="bt:20:23:01:03:04:15"
                proc=handle_error_connect(port)
        except KeyboardInterrupt:
            print("Sortie")
            break

def clone_card(proc):
    while True:
        pattern = r'(/.*dump[^\n]+\.bin)'
        with open('rrr.txt', 'r') as file:
            content = file.read()

        matches = re.findall(pattern, content)

        if matches:
            last_match = matches[-1]
            print("Copie de la carte:", last_match)
            display_command(b'hf mf cload -f '+last_match.encode('utf-8'),proc,10)
        else:
            print("Pas de dump de carte trouvée")

def count_button(board,count):
    
    button_pin = board.get_pin('d:2:i')
    button_pin2=board.get_pin('d:4:i')
    it = util.Iterator(board)
    it.start()
    mode=0
    button_state=False
    button_state2=False

    while True:
        try:

            time.sleep(1.1)
            button_new_state = button_pin.read()
            button_new_state2=button_pin2.read()
            #print(button_new_state2)
            #print(button_new_state)
            if button_state!=button_new_state:
                if button_state==False:
                    mode=mode+1
                button_state=button_new_state
            if button_state2!=button_new_state2:
                if button_state2==False:
                    mode=mode-1
                button_state2=button_new_state2
            count.value=mode            
            msg(f"Mode  : {mode}")
            #print("Button State:", mode)
        except KeyboardInterrupt:
            msg("clear")
            board.exit()

if __name__=='__main__':
    board = Arduino('/dev/ttyACM1')
    shared_count = multiprocessing.Value('i', 0)
    proc=multiprocessing.Process(target=count_button,args=(board,shared_count,))
    proc.start()
    port="bt:20:23:01:03:04:15"
    p=handle_error_connect(port)
    old_value=0

    while True:

        if shared_count.value!=old_value :

            if old_value!=0:
                proc2.terminate()
                proc2.join()
            if shared_count.value==0:
                print("Bonjour 0")
            elif shared_count.value==1:
                proc2=multiprocessing.Process(target=search_hf14a_cards,args=(p,))
                proc2.start()
                print("Bonjour 1")
            elif shared_count.value==2:
                proc2=multiprocessing.Process(target=crack_cards,args=(p,))
                proc2.start()
                print("Bonjour 2")
            elif shared_count.value==3:
                proc2=multiprocessing.Process(target=clone_card,args=(p,))
                proc2.start()
                print("Bonjour 3")
        else:
            print("les valeurs n'ont pas changé")
        old_value=shared_count.value
        time.sleep(1)

    #proc=multiprocessing.Process(target=clone_card,args=(p,))
    #proc.start()
    #time.sleep(30)
#
    #proc.terminate()
    #proc.join()
    #print("Terminé")
#
    #time.sleep(10)


    #display_command(b'info',p,1)
    #crack_cards(p)
